#include <avr/io.h>
#include <avr/interrupt.h>

#define F_CPU 1000000UL			/* Define CPU Frequency e.g. here 8MHz */
#include <util/delay.h>			/* Include Delay header file */

#define LCD_Dir  DDRB			/* Define LCD data port direction */
#define LCD_Port PORTB			/* Define LCD data port */
#define RS PB0				/* Define Register Select pin */
#define EN PB1 				/* Define Enable signal pin */

void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
	LCD_Port |= (1<<EN);		/* Enable pulse */
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
	LCD_Port |= (1<<EN);
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
	_delay_ms(2);
}

void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
	LCD_Port |= (1<<RS);		/* RS=1, data reg. */
	LCD_Port|= (1<<EN);
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
	LCD_Port |= (1<<EN);
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
	_delay_ms(2);
}

void LCD_Init (void)			/* LCD Initialize function */
{
	LCD_Dir = 0xFF;			/* Make LCD port direction as o/p */
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	
	LCD_Command(0x02);		/* send for 4 bit initialization of LCD  */
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
	LCD_Command(0x0c);              /* Display on cursor off*/
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
	LCD_Command(0x01);              /* Clear display screen*/
	_delay_ms(2);
}

void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
	{
		LCD_Char (str[i]);
	}
}

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
}

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
}

void LCD_Display(char* str, char value)
{
	LCD_String_xy(0,0,str);	/* Write string on 1st line of LCD*/
	LCD_Command(0xC0);		/* Go to 2nd line*/
	LCD_Char(value/100%10+48);
	LCD_Char(value/10%10+48);
	LCD_Char(value%10+48);
	_delay_ms(1000);
}


unsigned char temp[] = {0,0,0,0};
unsigned char msg[]={'0','0','0','\n','\r'}, cmnd;
char min=255, max = 0, temp_avg, avg,avge[]="Average Value",maxi[]="Max Value",mini[]="Min Value";


int main(void)
{
	DDRB = 0xFF;
	DDRC = 0xFF;
	DDRA = 0x00;

	TCNT1 = 0;
	OCR1A = 15625;
	TCCR1A = 0x00;
	TCCR1B = 0x0B; //setting to CTC mode with clock/64

	sei(); //enabling global interrupts
	TIMSK |= (1<<OCIE1A); //enabling OCR1A compare interrupt

	UBRRL = 0xC; //baud rate 4800
	UCSRB |= (1<<TXEN) | (1<<RXEN) | (1<<RXCIE); //transmitter on
	UCSRC |= (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); //1 byte


	ADMUX = 0xE0;  // 2.56 vref
	ADCSRA = 0x87;  // 128 prescalar

	while(1)
	{
		LCD_Init();			/* Initialization of LCD*/
		if(cmnd == 'H' || cmnd== 'h')
		LCD_Display(maxi, max);
		
		else if(cmnd == 'L' || cmnd== 'l')
		LCD_Display(mini, min);
		
		else
		LCD_Display(avge, avg);
	}
}

ISR(USART_RXC_vect)  // receive interrupt
{
	cmnd = UDR;
}

ISR(TIMER1_COMPA_vect)
{
	ADCSRA |= (1<<ADSC);  // when 1 sec delay occurs start ADC
	while((ADCSRA & (1<<ADIF))==0); //Check if conversion has ended
	
	if(ADCH>max)
	max = ADCH;

	if(ADCH<=min)  // first time min will be zero so we initialize it ourselves
	min = ADCH;
	
	// shifting our data to entertain new value
	temp[3] = temp[2];
	temp[2] = temp[1];
	temp[1] = temp[0];
	temp[0] = ADCH;
	
	temp_avg=(temp[0]+temp[1]+temp[2]+temp[3])/4; // running average
	
	avg = 1.05*(temp_avg) -2.1774;   // Predicting the actual value using ML
	
	msg[0]=avg/100%10+48;   // separating each digit
	msg[1]=avg/10%10+48;
	msg[2]=avg%10+48;
	
	for (int i=0;i<=4;i++)   // transferring character by character
	{
		while(!(UCSRA & (1<<UDRE))); // checks if UDR is ready to be written data on so that it can be transferred
		UDR = msg[i]; // transfers the avg value to serial port and can be seen on teraterm
	}
}